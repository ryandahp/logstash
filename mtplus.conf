input {
	 beats {
        port => "5064"
     } 
	 
	#redis{
	#	host => "192.168.158.27"
	#	port => "5044"
	#	key => "apache"
	#	data_type => "list"
	 #}
	 
	# syslog {
	#	port => 12345
	#	#codec => cef
	#	#syslog_field => "syslog"
	#	locale => "en"
	#	grok_pattern=>"\<%{NUMBER}\>%{NUMBER}\s%{GREEDYDATA:message}"
	#	codec => plain
	#}

}

filter{
	grok {
			 patterns_dir => ["patterns"]
			 match => [ "message", "%{MTPLUS_GEN}" ]
	}
	
	mutate {
				add_field => {"xdate" => "%{date}%{time}"}

	}
			
	date {
		match => ["xdate" , "yyyy-MM-ddHH:mm:ss,SSS"]
		target => "@timestamp"
	}
	
	mutate {
				gsub => [ "log_message", "Info \(Log4JListener.java:131\)\n\<Info\>\n  ", "" ]
				gsub => [ "log_message", "\n\<\/Info\>\n", "" ]
				gsub => [ "log_message", "\n\<\/Info\>", "" ]
	}
	
	if [log_message] =~ "INSERT INTO" or [log_message] =~ "POST" or [log_message] =~ "channelCardlink"{
		#grok {
		#	 patterns_dir => ["patterns"]
		#	 match => [ "log_message", "%{MTPLUS_NMSG}" ]
		#}
		if [log_message] =~ "INSERT INTO" {
			mutate {
				copy => { "log_message" => "xmessage" }
			}
			
			mutate {
					gsub => [ "xmessage", "''", "'null'" ]
					gsub => [ "xmessage", "','", "|" ]
					gsub => [ "xmessage", "',", "|" ]
					gsub => [ "xmessage", ",'", "|" ]
					gsub => [ "xmessage", "'", "" ]
			}
			
			grok {
				 patterns_dir => ["patterns"]
				 match => [ "xmessage", "%{MTPLUS_NMSG}" ]
			}
			
			grok {
				 patterns_dir => ["patterns"]
				 match => [ "nmsg", "%{MTPLUS_MMSG}" ]
			}
			
			mutate {
				remove_field => ["xmessage", "log_message1", "nmessage"]
			}
			
			mutate {
					gsub => [ "log_type", " ", "" ]
			}
			mutate {
				copy => { "REQUESTTEXT" => "msgid" }
			}
		} else if [log_message] =~ "POST" {
			mutate {
				copy => { "log_message" => "xmessage" }
			}
			mutate {
					gsub => [ "xmessage", "\n", "" ]
					gsub => [ "xmessage", "\t", "" ]
			}
			grok {
				 patterns_dir => ["patterns"]
				 match => [ "xmessage", "%{MTPLUS_LMSG}" ]
			}
			mutate {
					gsub => ["nmsg", "<methodName>", "methodname>"]
					gsub => [ "nmsg", "</methodName><params><member><name>", "|" ]
					gsub => [ "nmsg", "</name><value>",">"]
					gsub => [ "nmsg", "</value></member><member><name>","|"]
					gsub => ["nmsg", "</value></member></params></methodCall>", ""]
			}
			kv {
						source => "nmsg"
						field_split_pattern =>"\|"
						value_split => ">"
			}
			if [nmsg] =~ "Aktivasi Kartu" {
				mutate {
					#copy => { "SMSContent" => "msgid" }
					copy => { "methodname" => "log_type"}
					add_field => {"msgid" => "%{log_thread}%{SMSContent}"}
				}
			} else {
				mutate {
					#copy => { "SMSContent" => "msgid" }
					add_field => {"msgid" => "%{log_thread}%{SMSContent}"}
					copy => { "methodname" => "log_type"}
				}
			}
		} else if [log_message] =~ "channelCardlink" {
			if [log_message] =~ "MTPIN" {
				mutate {
					copy => { "log_message" => "xmessage" }
				}
				mutate {
						gsub => [ "xmessage", "\n", "" ]
						gsub => [ "xmessage", "\t", "" ]
						gsub => [ "xmessage", "\"", "" ]
						gsub => ["xmessage", "channelCardlink:192.168.121.65:4610 \(Log4JListener.java:131\)\<receive\>  \<isomsg direction=","log_type=iso_"]
						gsub => ["xmessage", "    ", ""]
						gsub => ["xmessage", "\>\<header\>",",header="]
						gsub => ["xmessage", "\<\/header\>\<field id=",","]
						gsub => ["xmessage", " value=","="]
						gsub => ["xmessage", "\/\>\<field id=",","]
						gsub => ["xmessage", "\/\>  \<\/isomsg\>\<\/receive\>",""]
						  
				}
				kv {
						source => "xmessage"
						field_split_pattern =>","
						value_split => "="
				}
				ruby {
					code => "
							event.set('msgid', event.get('2')[12..15])
					"
				}
			} else if [log_message] =~ "PCC" or [log_message] =~ "MTP" {
				drop{}
			}
		}
		
		aggregate {
				task_id => "%{msgid}"
					code => "
					log_type = event.get('log_type')
					if log_type == 'BNI.smsPush' then
						map['msisdn'] = event.get('MSISDN');
						map['transaction_id'] = event.get('TransactionID');
						map['refftransaction_id'] = event.get('ReffTransactionID');
						map['@timestamp'] = event.get('@timestamp');
						map['state_' + log_type] = event.get('@timestamp');
					end;
					if log_type == 'INSERTINTOTNCICILAN' then
						map['msisdn'] = event.get('NOPONSEL');
						map['nokartu'] = event.get('NOKARTU');
						map['@timestamp'] = event.get('@timestamp');
						map['state_' + log_type] = event.get('@timestamp');
					end;
					if log_type == 'iso_incoming' then
						map['nokartu'] = event.get('2');
						map['@timestamp'] = event.get('@timestamp');
						map['state_' + log_type] = event.get('@timestamp');
					end;
					map['smscontent'] = event.get('msgid');
					event.cancel()
					"
					
				push_map_as_event_on_timeout => true
				timeout_task_id_field => "msgid"
				inactivity_timeout => 5
				timeout => 10
			
				map_action => "create_or_update"
			}
	} else if [log_message] =~ "^Message" or [log_message] =~ "^send2HP" {
		grok {
			 patterns_dir => ["patterns"]
			 match => [ "log_message", "%{MTPLUS_OMSG}" ]
		}
		
		if [REQUESTTEXT] =~ "Permintaan PIN" {
			grok {
				 patterns_dir => ["patterns"]
				 match => [ "REQUESTTEXT", "%{MTPLUS_PMSG}" ]
			}
			#mutate {
			#	copy => { "lastn" => "msgid" }
			#}
			mutate {
					add_field => {"msgid" => "%{log_thread}%{REQUESTTEXT}"}
			}
		} else if [REQUESTTEXT] =~ "Aktivasi Kartu"{
			mutate {
					add_field => {"msgid" => "%{log_thread}%{REQUESTTEXT}"}
			}
		}else {
			mutate {
				copy => { "REQUESTTEXT" => "msgid" }
			}
		}
		
		mutate {
				gsub => [ "log_type", " ", "" ]
		}
		
		aggregate {
				task_id => "%{msgid}"
					code => "
					log_type = event.get('log_type')
					if event.get('REQUESTTEXT').include? 'Permintaan PIN' then
						map['smscontent'] = event.get('REQUESTTEXT')
						map['state_' + log_type] = event.get('@timestamp');
					end;
					if !event.get('REQUESTTEXT').include? 'Permintaan PIN' then
						map['smscontent'] = event.get('REQUESTTEXT')
						map['state_' + log_type] = event.get('@timestamp');
					end;
					#map['state_' + log_type] = event.get('@timestamp');
					event.cancel()
					"
			
				map_action => "create_or_update"
			}
	}
	
	mutate {
			remove_field => ["@version", "message", "date", "time", "xdate", "input"]
	}
}

output {
		stdout { 
				codec => rubydebug 
		}
		
		elasticsearch {
			hosts => [ "192.168.99.40:9200"]
			index => "xmtplus-%{+YYYY.MM.dd}"
			user  => "ls23"
			password  => "bniy2k"
		}
}
