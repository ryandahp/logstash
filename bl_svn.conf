input {
  beats {
    port => 5062
  }
}

#ilter {
#	mutate {
#		gsub => [ "[server][servername]", ".LOG", "" ]
#	}
#	
#	mutate {
#		remove_field => [ "host", "@version", "log","agent","ecs","input","tags"]
#	}
#	
#	if [message] =~ "(==========  SVN STATUS  ==========)" {
#		mutate {
#			gsub => [ "message", "\n", "" ]
#			gsub => [ "message", "svn_status: ", ";" ]
#			gsub => [ "message", "==========  SVN STATUS  ==========;", "" ]
#			gsub => [ "message", " \| ", "|" ]
#		}
#		
#		kv {
#			source => "message"
#			target => "status"
#			field_split_pattern =>";"
#			value_split => "\|"
#		}
#	} else if [message] =~ "(==========  SVN REVISION  ==========)" {
#		mutate {
#			gsub => [ "message", "\n", "" ]
#			gsub => [ "message", "svn_revision: ", ";" ]
#			gsub => [ "message", "==========  SVN REVISION  ==========;", "" ]
#			gsub => [ "message", " ", "_" ]
#			gsub => [ "message", ":_", "|" ]
#		}
#		kv {
#			source => "message"
#			field_split_pattern =>";"
#			value_split => "|"
#		}
#	} else if [message] =~ "(==========  SVN UPDATE  ==========)" {
#		mutate {
#			gsub => [ "message", "\n", "" ]
#			gsub => [ "message", "svn_revision: ", ";" ]
#			gsub => [ "message", "==========  SVN REVISION  ==========;", "" ]
#			gsub => [ "message", " ", "_" ]
#			gsub => [ "message", ":_", "|" ]
#		}
#		kv {
#			source => "message"
#			field_split_pattern =>";"
#			value_split => "|"
#		}
#	} else {
#		drop{}
#	}
#
filter {
	mutate {
		gsub => [ "[server][servername]", ".LOG", "" ]
	}
	
	mutate {
		remove_field => [ "host", "@version", "log","agent","ecs","input","tags"]
	}
	
	if [message] =~ "(==========  SVN STATUS  ==========|==========  SVN REVERT  ==========|==========  SVN UPDATE  ==========|==========  SVN CLEANUP  ==========|==========  SVN TIME UPDATE  ==========|==========  SVN REVISION  ==========)" {
		drop{}
	} else if [message] =~ "(svn_status)" {
		grok {
						patterns_dir => ["patterns"]
						match => [ "message", "%{BL_SVN}" ]
		}
		
		mutate {
					gsub => [ "fullpath", "[\\]", "/" ]
		}
			
		if [status] == "Reverted" {
			
			mutate {
					gsub => [ "fullpath", "'", "" ]
			}
		}
		
		ruby {
			code => "event.set('filename', (event.get('fullpath').split('/').last))
					 event.set('filepath', (File.dirname(event.get('fullpath'))))"
		}
		
		mutate {
			remove_field => ["message"]
		}
	} else if [message] =~ "(svn_update)" {
		grok {
						patterns_dir => ["patterns"]
						match => [ "message", "%{BL_SVN_UPDATE}" ]
		}
		
		mutate {
					gsub => [ "fullpath", "[\\]", "/" ]
		}
			
		if [status] == "Reverted" {
			
			mutate {
					gsub => [ "fullpath", "'", "" ]
			}
		}
		
		ruby {
			code => "event.set('filename', (event.get('fullpath').split('/').last))
					 event.set('filepath', (File.dirname(event.get('fullpath'))))"
		}
		
		mutate {
			remove_field => ["message"]
		}
	} else if [message] =~ "(svn_revision)" {
		mutate {
					gsub => [ "message", "svn_revision:", "svn_revision;" ]
					gsub => [ "message", " ", "_" ]
		}
		
		grok {
						patterns_dir => ["patterns"]
						match => [ "message", "%{BL_SVN_REVISION}" ]
		}
		
		mutate {
					gsub => [ "cmsg", ":_", "; " ]
		}
		
		kv {
								source => "cmsg"
								#field_split_pattern =>"\|"
								value_split => ";"
		}
		
		mutate {
			remove_field => ["message","cmsg"]
		}
	} else if [message] =~ "(svn_revert)" {
		grok {
						patterns_dir => ["patterns"]
						match => [ "message", "%{BL_SVN_UPDATE}" ]
		}
		
		mutate {
					gsub => [ "fullpath", "[\\]", "/" ]
					gsub => [ "fullpath", "'", "" ]
		}
		
		ruby {
			code => "event.set('filename', (event.get('fullpath').split('/').last))
					 event.set('filepath', (File.dirname(event.get('fullpath'))))"
		}
		
		mutate {
			remove_field => ["message"]
		}
	} else if [message] =~ "(Hours             |Minutes           |Seconds           |Milliseconds      )" {
		mutate {
			add_field => { "mode" => "svn_duration"}
		}
		
		kv {
								source => "message"
								#field_split_pattern =>"\|"
								value_split => ":"
		}
		
		#grok {
		#				patterns_dir => ["patterns"]
		#				match => [ "message", "%{BL_SVN_TIME}" ]
		#}
		
		mutate {
			remove_field => ["message"]
		}
	}
}

output {
  stdout { codec => rubydebug }
  elasticsearch {
	hosts => ["192.168.99.40:9200"]
	#index => "ap-%{[fields][log_type]}-%{+YYYY.MM.dd}"
	index => "test-svn-%{[server][servername]}-%{+YYYY.MM.dd}"
	user  => "ls23"
	password => "bniy2k"
  }
}